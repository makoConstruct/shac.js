// Generated by CoffeeScript 1.8.0
(function() {
  var arrayRemoveElement,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  arrayRemoveElement = function(ar, el) {
    var i;
    i = ar.indexOf(el);
    if (i >= 0) {
      return ar.splice(i, 1);
    }
  };

  this.attachAutocompletion = function(input, matchsetArray, matchCallback) {
    var ac, config, matchset;
    config = null;
    if (input.constructor === Object) {
      config = input;
    } else {
      config = {
        input: input,
        matchsetArray: matchsetArray,
        matchCallback: matchCallback
      };
    }
    config.dropdownCSSClass || (config.dropdownCSSClass = 'autocompletion_drop');
    config.matchingLetterCSSClass || (config.matchingLetterCSSClass = 'autocompletion_matching_letter');
    config.matchCSSClass || (config.matchCSSClass = 'autocompletion_match');
    matchset = new this.MatchSet(config.matchsetArray, config.matchingLetterCSSClass);
    ac = new this.Autocompletion(matchset, config.dropdownCSSClass, config.matchCSSClass);
    ac.attach(input);
    if (config.matchCallback) {
      ac.addFiringListener(config.matchCallback);
    }
    return ac;
  };

  this.Autocompletion = (function() {
    function Autocompletion(matchset, dropClass, matchClass) {
      this.matchset = matchset;
      this.matchClass = matchClass;
      this.keydown = __bind(this.keydown, this);
      this.onInput = __bind(this.onInput, this);
      this.collapse = __bind(this.collapse, this);
      this.deploy = __bind(this.deploy, this);
      this.drop = document.createElement('div');
      this.drop.classList.add(dropClass);
      document.body.appendChild(this.drop);
      this.dropListContainer = this.drop;
      this.currentResultList = [];
      this.firingListeners = [];
    }

    Autocompletion.prototype.attach = function(newInput) {
      if (this.input) {
        this.detach();
      }
      this.input = newInput;
      this.input.addEventListener('input', this.onInput);
      this.input.addEventListener('focus', this.deploy);
      this.input.addEventListener('blur', this.collapse);
      return this.input.addEventListener('keydown', this.keydown);
    };

    Autocompletion.prototype.detach = function() {
      document.body.removeChild(this.drop);
      this.input.removeEventListener('input', this.onInput);
      this.input.removeEventListener('focus', this.deploy);
      this.input.removeEventListener('blur', this.collapse);
      this.input.removeEventListener('keydown', this.keydown);
      return this.input = null;
    };

    Autocompletion.prototype.pushToDrop = function(resultList) {
      var i, newResultEl, _i, _ref;
      this.currentResultList = resultList;
      while (this.dropListContainer.children.length > resultList.length) {
        this.dropListContainer.removeChild(this.dropListContainer.lastChild);
      }
      while (this.dropListContainer.children.length < resultList.length) {
        newResultEl = document.createElement('div');
        newResultEl.classList.add(this.matchClass);
        this.dropListContainer.appendChild(newResultEl);
      }
      for (i = _i = 0, _ref = resultList.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.dropListContainer.children[i].innerHTML = resultList[i].matched;
      }
      if (resultList.length > 0) {
        return this.deploy();
      } else {
        return this.collapse();
      }
    };

    Autocompletion.prototype.addFiringListener = function(callback) {
      return this.firingListeners.push(callback);
    };

    Autocompletion.prototype.removeFiringListener = function(callback) {
      return arrayRemoveElement(this.firingListeners, callback);
    };

    Autocompletion.prototype.fireFiringListeners = function(keyKey) {
      var fl, _i, _len, _ref, _results;
      _ref = this.firingListeners;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fl = _ref[_i];
        _results.push(fl(keyKey));
      }
      return _results;
    };

    Autocompletion.prototype.deploy = function() {
      var cr;
      if (this.dropListContainer.children.length > 0) {
        cr = this.input.getBoundingClientRect();
        this.drop.style.left = cr.left + 'px';
        this.drop.style.top = cr.bottom + 'px';
        return this.drop.classList.add('visible');
      }
    };

    Autocompletion.prototype.collapse = function() {
      return this.drop.classList.remove('visible');
    };

    Autocompletion.prototype.onInput = function() {
      var res;
      res = this.matchset.seek(this.input.value);
      this.pushToDrop(res);
      if (res.length > 0) {
        return this.deploy();
      }
    };

    Autocompletion.prototype.keydown = function(ev) {
      switch (ev.keyCode) {
        case 13:
          if (this.currentResultList.length > 0) {
            this.input.value = this.currentResultList[0].text;
            return this.fireFiringListeners(this.currentResultList[0].key);
          }
          break;
        case 27:
          return this.collapse();
      }
    };

    return Autocompletion;

  })();

}).call(this);
